# Multi-stage Docker build for FastMCP Server
# Security-hardened container with minimal attack surface

# Stage 1: Build stage with full toolchain
FROM node:18-alpine AS builder

# Install build dependencies for native modules
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Create app directory
WORKDIR /app

# Copy package files for dependency installation
COPY package*.json ./

# Install dependencies (including dev dependencies for build)
RUN npm ci --only=production && npm cache clean --force

# Stage 2: Production stage with minimal runtime
FROM node:18-alpine AS runtime

# Security: Create non-root user early
RUN addgroup -g 1001 -S mcpuser && \
    adduser -S -D -H -u 1001 -s /sbin/nologin -G mcpuser mcpuser

# Security: Install only essential runtime packages and security updates
RUN apk add --no-cache \
    dumb-init \
    && apk upgrade --no-cache \
    && rm -rf /var/cache/apk/* /tmp/* /var/tmp/*

# Set working directory
WORKDIR /app

# Copy production dependencies from builder
COPY --from=builder --chown=mcpuser:mcpuser /app/node_modules ./node_modules
COPY --from=builder --chown=mcpuser:mcpuser /app/package*.json ./

# Copy server files with proper ownership
COPY --chown=mcpuser:mcpuser servers/fastmcp-litellm-server.js ./
COPY --chown=mcpuser:mcpuser servers/providers/ ./providers/
COPY --chown=mcpuser:mcpuser servers/decorators/ ./decorators/
COPY --chown=mcpuser:mcpuser servers/config/ ./config/

# Security: Set read-only root filesystem (except /tmp)
RUN mkdir -p /tmp/app-cache && \
    chown -R mcpuser:mcpuser /tmp/app-cache

# Security: Remove unnecessary packages and files
RUN rm -rf /usr/local/lib/node_modules/npm \
    /usr/local/bin/npm \
    /usr/local/bin/npx \
    /opt/yarn* \
    /tmp/* \
    /var/tmp/* \
    /root/.npm

# Security: Switch to non-root user
USER mcpuser

# Security: Set environment variables for hardening
ENV NODE_ENV=production
ENV NODE_OPTIONS="--max-old-space-size=256 --max-semi-space-size=32"
ENV NPM_CONFIG_CACHE=/tmp/app-cache
ENV HOME=/tmp/app-cache

# Expose port (FastMCP uses stdio by default, but this documents the intent)
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=5s --start-period=5s --retries=3 \
    CMD node -e "process.exit(0)" || exit 1

# Security: Use dumb-init as PID 1 to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Run the FastMCP server
CMD ["node", "fastmcp-litellm-server.js"]